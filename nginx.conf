server {
    error_log /var/log/nginx/error.log debug;

    # Uses the Nginx image filter module to dynamically resize and store the resized image on server
    # http://wiki.nginx.org/HttpImageFilterModule

    # Modified from an original gist:
    # https://gist.github.com/phpdude/1451684

    # Intention is to support most of the commands here:
    # https://github.com/beetlebugorg/mod_dims/wiki/Webservice-API
    # e.g. http://<dims-host>/resize/100x100/http://media.parker.beetlebug.org/archive/2009/03/17/DSC_D300_1872.web.jpg
    listen   8080; ## listen for ipv4; this line is default and implied
    server_name _;
    log_subrequest on;
    rewrite_log on;

    # NOTE: this directory needs to have the permissions set to 777 so proxy_store will work correctly
    root /mnt/media;

    # Needed to allow uri protocol slashes from being merged
    merge_slashes off;

    # Will proxy to external urls and gets remote images, the following will allow it to resolve properly
    resolver 8.8.8.8;  # Google DNS

    proxy_intercept_errors      on;
    proxy_pass_request_body     off;
    proxy_pass_request_headers  off;
    # Need to also handle HEAD requests
    proxy_method                GET;
    proxy_temp_path             /tmp/images;
    proxy_store_access          user:rw  group:rw  all:r;

    # This is the secret sauce to allow us to handle redirects with image uri's
    recursive_error_pages       on;

    # Sets the maximum size for images during a request
    image_filter_buffer         10M;
    image_filter_jpeg_quality   95;

    location = /favicon.ico {
        log_not_found off;
    }

    # http://wiki.nginx.org/HttpImageFilterModule#image_filter
    # commands test, rotate, size, crop, resize
    location ~ ^/(resize|crop)/(\d+)x(\d+)/(.*) {
        set $command $1;
        set $arg1 $2;
        set $arg2 $3;
        set $image_uri $4;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    location ~ ^/rotate/(90|180|270)/(.*) {
        set $command rotate;
        set $arg1 $1;
        set $arg2 '';
        set $image_uri $2;

        # Use error_page to see if it's on disk, else try to generate it
        error_page 404 = @process;
        log_not_found off;
    }

    location @process {
        internal;
        # Store the image in proxy storage for later retrievals (using $request_uri intentionally)
        proxy_store                 $document_root$request_uri;

        # Generate the image if it doesn't exist
        proxy_pass http://127.0.0.1:8080/internal/$command?uri=$image_uri&arg1=$arg1&arg2=$arg2;
    }

    location @process_redirect {
        internal;
        # Note: we are not reusing the @process named location since we don't want to save two copies on disk
        # Set the Location header for a redirect to a the image uri (further proxying will reset it)
        set $image_uri $upstream_http_location;

        # This is intended to be the exact url that's also in the @process named location
        proxy_pass http://127.0.0.1:8080/internal/$command?uri=$image_uri&arg1=$arg1&arg2=$arg2;
    }

    # Note: the image_filter directive does not work in the context of anything other than location (i.e. that's why the repetition that follows)
    location ~ /internal/(resize) {
        allow 127.0.0.0/8;
        deny all;

        proxy_pass                  $arg_uri;
        # Handle redirects
        error_page 301 302 307 = @process_redirect;

        # We reset these variables because technically we're in a different request
        set $command $1;
        set $arg1 $arg_arg1;
        set $arg2 $arg_arg2;

        # Perform the filter
        image_filter                resize $arg1 $arg2;
    }

    location ~ /internal/(crop) {
        allow 127.0.0.0/8;
        deny all;

        proxy_pass                  $arg_uri;
        # Handle redirects
        error_page 301 302 307 = @process_redirect;

        # We reset these variables because technically we're in a different request
        set $command $1;
        set $arg1 $arg_arg1;
        set $arg2 $arg_arg2;

        # Perform the filter
        image_filter                crop $arg1 $arg2;
    }

    location ~ /internal/(rotate) {
        allow 127.0.0.0/8;
        deny all;

        proxy_pass                  $arg_uri;
        # Handle redirects
        error_page 301 302 307 = @process_redirect;

        # We reset these variables because technically we're in a different request
        set $command $1;
        set $arg1 $arg_arg1;
        set $arg2 $arg_arg2;

        image_filter                rotate $arg1;
    }
}
